intercept = -1.1
exp(intercept)
odd_intercept = exp(intercept)
odd_intercept/(1+odd_intercept)
LogOdds_Prob <- function(x){
exp(x)/(1+exp(x))
}
LogOdds_Prob(-1.1)
Prob_LogOdds <- function(x){
log(x/(1-x))
}
Prob_LogOdds(.25)
Prob_LogOdds(.25)
Prob_LogOdds(.75) - Prob_LogOdds(.25)
Prob_LogOdds(.25)
beta_moral <- Prob_LogOdds(.75) - Prob_LogOdds(.25) #Difference with control condition
#Function to convert log odds to probability
LogOdds_Prob <- function(x){
exp(x)/(1+exp(x))
}
#Function to convert probability to log odds
Prob_LogOdds <- function(x){
log(x/(1-x))
}
#################################################
# Specifying the parameters of the linear model #
#################################################
#What should the intercept of the model be, if 25% of participants in the
#control condition get the task correct?
intercept <- Prob_LogOdds(.25)
#What should the effect of condition be, if 75% of participants in the
#experimental condition get the task correct?
beta_cond <- Prob_LogOdds(.75) - Prob_LogOdds(.25)
#Sample size
nn <- 887
#Proportion of participants assigned to the experimental condition
p_exp <- 5/7
#Examine a sequence of betas for the interaction effect between experimental
#condition and the covariate
beta_range <- seq(0, 1, .1)
beta_int <- beta_range[10]
beta_int
cond = rbinom(nn, 1, p_exp)
covariate = rnorm(nn)
lp = intercept + beta_cond*cond + 0*covariate + beta_int*cond*covariate
link_lp = exp(lp)/(1 + exp(lp))
y = (runif(nn) < link_lp)
glm(y ~ cond*covariate, family=binomial)
data <- data.frame(y = y, cond = as.factor(cond), covariate = covariate)
glm(y ~ cond*covariate, data = data, family=binomial) #Run a logistic regression
log.int = glm(y ~ cond*covariate, family=binomial)
summary(log.int)$coefficients
library(ggplot2)
plotdat <- data.frame(odds_ratio = exp(beta_range), power = results[4,])
beta_range <- seq(0, 1, .1)
#Run a simulation for each value in the sequence of betas
results <- sapply(beta_range, function(beta_int){
#Run 1000 replications
tmp_results <- replicate(n = 10, expr = {
#Randomly draw condition from Bernoulli distribution
cond = rbinom(nn, 1, p_exp)
#Randomly draw covariate from standard Normal distribution
covariate = rnorm(nn)
#Specify the linear model. If a main effect for the covariate is expected,
#replace the beta value of 0 with another value.
lp = intercept + beta_cond*cond + 0*covariate + beta_int*cond*covariate
#The link function for logistic regression
link_lp = exp(lp)/(1 + exp(lp))
#The outcome variable
y = (runif(nn) < link_lp)
#Run a logistic regression
log.int = glm(y ~ cond*covariate, family=binomial)
#Check which coefficients are significant
summary(log.int)$coefficients[,4] < .05
})
#Compute the power for each coefficient
rowSums(tmp_results)/ncol(tmp_results)
})
plotdat <- data.frame(odds_ratio = exp(beta_range), power = results[4,])
power_plot <- ggplot(plotdat, aes(x = odds_ratio, y = power))+
geom_path()+
geom_hline(yintercept = .8, linetype = 2)+
geom_vline(xintercept = exp(beta_range[which(diff(results[4,] > .8)!=0)]))+
annotate("text", x = 1.7, y = .75, label = round(exp(beta_range[which(diff(results[4,] > .8)!=0)]), 2))+
theme_bw()
power_plot
log(1.62)
beta_cond
P_1sd <- intercept + beta_cond + log(1.62)*1
P_1sd
LogOdds_Prob(P_1sd)
results <- replicate(n = 10000, expr = {
intercept = -1.1 #Assume the intercept is -1.1
cond = rbinom(nn, 1, 5/7) #Probability any given participant is assigned an experimental condition is 5/7ths
covariate = rnorm(nn) #covariateity is standardized: Normally distributed with a mean of 0 and SD of 1
lp = intercept + 2.2*cond + this_beta*cond*covariate #The linear model
link_lp = exp(lp)/(1 + exp(lp)) #The link function for logistic regression
y = (runif(nn) < link_lp) #The outcome variable
data <- data.frame(y = y, cond = as.factor(cond), covariate = covariate)
log.int = glm(y~ cond *covariate, data = data, family=binomial) #Run a logistic regression
#summary(log.int)$coefficients[,4] < .05 #Check which coefficients are significant
predict.glm(log.int, newdata = data.frame(cond = factor(1, levels = c("0", "1")), covariate = 1), type = "response")
})
this_beta <- log(1.62)
results <- replicate(n = 10000, expr = {
intercept = -1.1 #Assume the intercept is -1.1
cond = rbinom(nn, 1, 5/7) #Probability any given participant is assigned an experimental condition is 5/7ths
covariate = rnorm(nn) #covariateity is standardized: Normally distributed with a mean of 0 and SD of 1
lp = intercept + 2.2*cond + this_beta*cond*covariate #The linear model
link_lp = exp(lp)/(1 + exp(lp)) #The link function for logistic regression
y = (runif(nn) < link_lp) #The outcome variable
data <- data.frame(y = y, cond = as.factor(cond), covariate = covariate)
log.int = glm(y~ cond *covariate, data = data, family=binomial) #Run a logistic regression
#summary(log.int)$coefficients[,4] < .05 #Check which coefficients are significant
predict.glm(log.int, newdata = data.frame(cond = factor(1, levels = c("0", "1")), covariate = 1), type = "response")
})
mean(results)
P_1sd <- LogOdds_Prob(intercept + beta_cond + log(1.62))
P_1sd
P_0 <- LogOdds_Prob(intercept + beta_cond)
P_0
cohens_d <- qnorm(P_1sd) - qnorm(P_0)
cohens_d
plot(plotdat$odds_ratio, plotdat$power, type = "l")
power_plot
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
#Function to convert log odds to probability
LogOdds_Prob <- function(x){
exp(x)/(1+exp(x))
}
#Function to convert probability to log odds
Prob_LogOdds <- function(x){
log(x/(1-x))
}
#################################################
# Specifying the parameters of the linear model #
#################################################
#What should the intercept of the model be, if 25% of participants in the
#control condition get the task correct?
intercept <- Prob_LogOdds(.25)
#What should the effect of condition be, if 75% of participants in the
#experimental condition get the task correct?
beta_cond <- Prob_LogOdds(.75) - Prob_LogOdds(.25)
#Sample size
nn <- 887
#Proportion of participants assigned to the experimental condition
p_exp <- 5/7
#Examine a sequence of betas for the interaction effect between experimental
#condition and the covariate
beta_range <- seq(0, 1, .1)
beta_int <- beta_range[10]
cond = rbinom(nn, 1, p_exp)
#Randomly draw covariate from standard Normal distribution
covariate = rnorm(nn)
#Specify the linear model. If a main effect for the covariate is expected,
#replace the beta value of 0 with another value.
lp = intercept + beta_cond*cond + 0*covariate + beta_int*cond*covariate
#The link function for logistic regression
link_lp = exp(lp)/(1 + exp(lp))
#The outcome variable
y = (runif(nn) < link_lp)
#Run a logistic regression
log.int = glm(y ~ cond*covariate, family=binomial)
#Check which coefficients are significant
summary(log.int)$coefficients
qnorm(.05, lower.tail = FALSE)
results <- sapply(beta_range, function(beta_int){
#Run 1000 replications
tmp_results <- replicate(n = 10, expr = {
#Randomly draw condition from Bernoulli distribution
cond = rbinom(nn, 1, p_exp)
#Randomly draw covariate from standard Normal distribution
covariate = rnorm(nn)
#Specify the linear model. If a main effect for the covariate is expected,
#replace the beta value of 0 with another value.
lp = intercept + beta_cond*cond + 0*covariate + beta_int*cond*covariate
#The link function for logistic regression
link_lp = exp(lp)/(1 + exp(lp))
#The outcome variable
y = (runif(nn) < link_lp)
#Run a logistic regression
log.int = glm(y ~ cond*covariate, family=binomial)
#Check which coefficients are significant
summary(log.int)$coefficients[4,3] > 1.644854
})
#Compute the power for each coefficient
sum(tmp_results)/length(tmp_results)
})
results
#Run a simulation for each value in the sequence of betas
results <- sapply(beta_range, function(beta_int){
#Run 1000 replications
tmp_results <- replicate(n = 10, expr = {
#Randomly draw condition from Bernoulli distribution
cond = rbinom(nn, 1, p_exp)
#Randomly draw covariate from standard Normal distribution
covariate = rnorm(nn)
#Specify the linear model. If a main effect for the covariate is expected,
#replace the beta value of 0 with another value.
lp = intercept + beta_cond*cond + 0*covariate + beta_int*cond*covariate
#The link function for logistic regression
link_lp = exp(lp)/(1 + exp(lp))
#The outcome variable
y = (runif(nn) < link_lp)
#Run a logistic regression
log.int = glm(y ~ cond*covariate, family=binomial)
#Check which coefficients are significant
summary(log.int)$coefficients[4,3] > 1.644854
})
#Compute the power for each coefficient
sum(tmp_results)/10
})
results
library(ggplot2)
plotdat <- data.frame(odds_ratio = exp(beta_range), power = results)
ggplot(plotdat, aes(x = odds_ratio, y = power))+
geom_path()+
geom_hline(yintercept = .8, linetype = 2)+
#Add a horizontal line at the point where power exceeds the conventional
#threshold of .8, and a label for this point
geom_vline(xintercept = exp(beta_range[which(diff(results > .8)!=0)+1]))+
annotate("text", x = 1.7, y = .75, label = round(exp(beta_range[which(diff(results > .8)!=0)+1]), 2))+
labs(x = "Effect size (odds ratio)", y = "Power")+
theme_bw()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
LogOdds_Prob <- function(x){
exp(x)/(1+exp(x))
}
Prob_LogOdds <- function(x){
log(x/(1-x))
}
intercept <- Prob_LogOdds(.25)
beta_cond <- Prob_LogOdds(.75) - Prob_LogOdds(.25)
nn <- 887
#Proportion of participants assigned to the experimental condition
p_exp <- 5/7
#Range of betas
beta_range <- seq(0, 1, .01)
results <- sapply(beta_range, function(beta_int){
#Run 1000 replications
tmp_results <- replicate(n = 10, expr = {
#Randomly draw condition from Bernoulli distribution
cond = rbinom(nn, 1, p_exp)
#Randomly draw covariate from standard Normal distribution
covariate = rnorm(nn)
#Specify the linear model. If a main effect for the covariate is expected,
#replace the beta value of 0 with another value.
lp = intercept + beta_cond*cond + 0*covariate + beta_int*cond*covariate
#The link function for logistic regression
link_lp = exp(lp)/(1 + exp(lp))
#The outcome variable
y = (runif(nn) < link_lp)
#Run a logistic regression
log.int = glm(y ~ cond*covariate, family=binomial)
#One-tailed test to see if the interaction is significant
summary(log.int)$coefficients[4,3] > 1.644854
})
#Compute the power for each coefficient
sum(tmp_results)/length(tmp_results)
})
library(ggplot2)
plotdat <- data.frame(odds_ratio = exp(beta_range), power = results)
ggplot(plotdat, aes(x = odds_ratio, y = power))+
geom_path()+
geom_hline(yintercept = .8, linetype = 2)+
#Add a horizontal line at the point where power exceeds the conventional
#threshold of .8, and a label for this point
geom_vline(xintercept = exp(beta_range[which(diff(results > .8)!=0)]))+
annotate("text", x = 1.6, y = .75, label = round(exp(beta_range[which(diff(results > .8)!=0)]), 2))+
labs(x = "Effect size (odds ratio)", y = "Power")+
theme_bw()
beta_range[which(diff(results > .8)!=0)]
blogdown:::serve_site()
blogdown:::serve_site()
warnings()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
(25/65)*.5
(65/100)*.5
.5*.65
.352*100
(50*65)/125
(75*65)/125
75/100
1-(88/99)
1-(11/99)
35.1/(sqrt(52.9*.111*.888))
35.1/52.9^.5
1-(13/99)
1-(88/101)
35.1/(sqrt(52.9*.111*.13))
573/1511
573/2771
573/959
1511/2771
library(xlsx)
install.packages("xlsx")
library(xlsx)
data <- read.xlsx("C:/Users/Caspar/Desktop/pda-2.xlsx")
data <- read.xlsx("C:/Users/Caspar/Desktop/pda-2.xlsx", 1)
View(data)
data <- read.xlsx("C:/Users/Caspar/Desktop/pda-2.xlsx", 1, startRow = 2)
View(data)
data <- read.xlsx("C:/Users/Caspar/Desktop/pda-2.xlsx", 1, startRow = 3)
data[c(2,3,4,5),]<-data[1,]
data
table(data[ , c(4,5)])
data[c(3,4),c(4,5)]
data[c(3,4),c(4,5)]<-c(0,0)
data
data <- read.xlsx("C:/Users/Caspar/Desktop/pda-2.xlsx", 1, startRow = 3)
data[c(2,3,4,5),]<-data[1,]
data[c(3,4),c(4,5)]<-c(0,0)
data[c(1,c(4,5)]<-c(1,0)
table(data[ , c(4,5)])
gsub("Hoeveel.deden.jouw.ouders.verzorgers.in.het.huishouden.....", "", names(data))
names(data)[c(4,5)] <- c("Vader", "Moeder")
data <- read.xlsx("C:/Users/Caspar/Desktop/pda-2.xlsx", 1, startRow = 3)
names(data)[c(4,5)] <- c("Vader", "Moeder")
data[c(2,3,4,5),]<-data[1,]
data[c(3,4),c(4,5)]<-c(0,0)
data[c(1,c(4,5)]<-c(1,0)
table(data[ , c(4,5)])
table(data[ , c(5, 4)])
data <- read.xlsx("C:/Users/Caspar/Desktop/pda-2.xlsx", 1, startRow = 3)
names(data)[c(4,5)] <- c("Vader", "Moeder")
data[2:20,]<-data[1,]
table(data[ , c(5)])
data <- read.xlsx("C:/Users/Caspar/Desktop/pda-2.xlsx", 1, startRow = 3)
names(data)[c(4,5)] <- c("Vader", "Moeder")
data[2:20,]<-data[1,]
data[2:5,c(4,5)]<-c(0,0)
data[6:10,c(4,5)]<-c(1,0)
data[c(1,c(4,5)]<-c(1,0)
data <- read.xlsx("C:/Users/Caspar/Desktop/pda-2.xlsx", 1, startRow = 3)
names(data)[c(4,5)] <- c("Vader", "Moeder")
data[2:20,]<-data[1,]
data[2:5, c(4,5)]<-c(0,0)
data[6:10, c(4,5)]<-c(1,0)
data[11:15, c(4,5)]<-c(1,1)
table(data[ , c(5)])
data$Vader <- factor(data$Vader)
table(data[ , c(4)])
data$Vader <- factor(data$Vader, levels = c("Weinig", "Veel"))
table(data[ , c(4)])
data <- read.xlsx("C:/Users/Caspar/Desktop/pda-2.xlsx", 1, startRow = 3)
names(data)[c(4,5)] <- c("Vader", "Moeder")
data[2:20,]<-data[1,]
data[2:5, c(4,5)]<-c(0,0)
data[6:10, c(4,5)]<-c(1,0)
data[11:15, c(4,5)]<-c(1,1)
data$Vader <- factor(data$Vader, labels = c("Weinig", "Veel"))
table(data[ , c(4)])
table(data[ , c(5)])
data$Moeder <- factor(data$Moeder, labels = c("Weinig", "Veel"))
table(data[ , c(5)])
cat("Moeder", table(data[ , c(5)]))
print("Moeder")
table(data[ , c(5)])
table(data[ , c(5)])
table(data[ , c(4)])
View(data)
data <- read.xlsx("C:/Users/Caspar/Desktop/pda-2.xlsx", 1, startRow = 3)
names(data)[c(4,5)] <- c("Vader", "Moeder")
data$Vader <- factor(data$Vader, labels = c("Weinig", "Veel"))
data$Moeder <- factor(data$Moeder, labels = c("Weinig", "Veel"))
data <- read.xlsx("C:/Users/Caspar/Desktop/pda-2.xlsx", 1, startRow = 3)
names(data)[c(4,5)] <- c("Vader", "Moeder")
data$Vader <- factor(data$Vader, labels = c("Weinig", "Veel"))
data$Vader
table(data[ , c(5)])
table(data[ , c(4)])
library(devtools)
devtools::install_github("rstudio/rmarkdown")
blogdown:::serve_site()
blogdown:::serve_site()
system.time()
system.time()
Sys.time()
blogdown:::serve_site()
install.packages("blogdown")
if (!requireNamespace("devtools")) install.packages("devtools")
devtools::install_github("rstudio/blogdown")
blogdown::install_hugo()
install.packages("later")
install.packages("rmarkdown")
blogdown::build_site()
if (!requireNamespace("devtools")) install.packages("devtools")
devtools::install_github("rstudio/blogdown")
library(devtools)
print(.libPaths())
R_LIBS
Sys.getenv('R_LIBS_USER')
install.packages("metaforest")
print(.libPaths())
getwd()
Rhome()
R.home()
help(Startup)
R_ENVIRON
.Renviron
.Renviron()
Sys.getenv("R_USER")
path.expand(~)
path.expand("~")
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
